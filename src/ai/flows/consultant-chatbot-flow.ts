
'use server';

/**
 * @fileOverview A helpful assistant chatbot for the Pool Consultant Management System.
 *
 * - consultantChatbotFlow - A function that handles the conversation with the consultant.
 * - GetConsultantDetailsInput - The input type for the getConsultantDetailsTool.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { getConsultantById } from '@/lib/data';
import type { Consultant } from '@/lib/types';


const GetConsultantDetailsInputSchema = z.object({
    consultantId: z.string().describe("The ID of the consultant to fetch details for."),
});
export type GetConsultantDetailsInput = z.infer<typeof GetConsultantDetailsInputSchema>;

const getConsultantDetailsTool = ai.defineTool(
    {
        name: 'getConsultantDetails',
        description: 'Fetches all details for a given consultant from the database.',
        inputSchema: GetConsultantDetailsInputSchema,
        outputSchema: z.custom<Consultant>(),
    },
    async ({ consultantId }) => {
        console.log(`Fetching details for consultant: ${consultantId}`);
        const consultant = await getConsultantById(consultantId);
        if (!consultant) {
            throw new Error('Consultant not found');
        }
        return consultant;
    }
);


const prompt = ai.definePrompt({
    name: 'consultantChatbotPrompt',
    tools: [getConsultantDetailsTool],
    prompt: `You are a helpful assistant trained to answer questions about the Pool Consultant Management System. This application is used by consultants and administrators to manage resumes, attendance, opportunities, and training.

Your job is to:
- Help users (consultants) navigate the system.
- Explain how to use features like uploading resumes, viewing dashboard reports, checking attendance, and tracking skill scores.
- Provide accurate answers based on system behavior and the data you can fetch using tools.
- Be concise, friendly, and easy to understand.

Capabilities of the system:
- Consultants can log in, upload resumes, track their AI-assessed skills, view training recommendations, and see their opportunity status.
- Admins can view consultant performance, monitor resume updates, generate reports, and check attendance stats.
- Attendance is recorded via the admin console.
- Skill scores are AI-generated by analyzing resumes using a resume agent.
- Opportunity agent logs opportunities offered during bench periods.

Sample user questions:
- "How do I upload my resume?"
- "Why is my attendance showing as low?"
- "What does 'skill score' mean?"
- "How can I see my past opportunities?"
- "Can I update my resume version?"

When asked a question that requires personal data (e.g., "What is my attendance?"), you MUST use the \`getConsultantDetails\` tool to fetch the user's data first. The user's ID is provided in the input.

If you're unsure of something, suggest contacting the system admin or visiting the help section.

Always stay relevant to the application and its features. The conversation history is provided. Your response should be the next logical step in the conversation.
`,
});

export const consultantChatbotFlow = ai.defineFlow(
    {
        name: 'consultantChatbotFlow',
        inputSchema: z.object({
            history: z.array(z.any()),
            consultantId: z.string(),
        }),
        outputSchema: z.string(),
    },
    async ({ history, consultantId }) => {

        // Add the consultantId to a hidden user message so the model knows which user to talk about.
        const augmentedHistory = [
            ...history,
            {
                role: 'user',
                content: [{ text: `(My consultant ID is ${consultantId})` }],
            },
        ];

        const result = await prompt(augmentedHistory);
        const choice = result.choices[0];

        if (choice.toolRequests.length > 0) {
            const toolRequest = choice.toolRequests[0];
            const toolResponse = await toolRequest.run();
            const toolResponsePart = {
                role: 'tool',
                content: [ { toolResponse: { name: toolRequest.name, output: toolResponse } } ],
            }

            // After executing the tool, continue the conversation with the tool's output.
            const finalResult = await result.continue([toolResponsePart]);
            return finalResult.choices[0].text;
        }
        
        return choice.text;
    }
);
